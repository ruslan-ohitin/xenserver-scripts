#!/bin/bash

# Writing log message with vm name and timestamp

# timestamp returns seconds from epoch
timestamp() {
    date +%s
}

# Get number of seconds and return human readable string with days, hours, minutes and seconds.
# sec_to_period seconds
sec_to_period() {
    local SEC
    local DAYS
    local RES

    SEC=$1
    RES=""

    let DAYS="$SEC/86400"
    if ((DAYS > 0 ))
    then
        RES+="$DAYS days "
    fi

    echo "${RES}$(date -ud@$SEC +%H:%M:%S)"
}

# log_message "MESSAGE" [seconds at precess start]
log_message() {
    if [ -n "$1" ]
    then
        local MSG
        local SEC
        local SEC_START
        local SEC_END

        MSG="$(date +%F\ %H:%M:%S) VM $VM: $1"

        # Calculate period from seconds since epoch given as $2 and current seconds.
        if [ -n "$2" ]
        then
            SEC_START=$2
            SEC_END=$(timestamp)
            let SEC="$SEC_END - $SEC_START"
            MSG+=" takes $(sec_to_period $SEC)"
        fi

        echo $MSG 
    fi
}

# Main program

# Get directory where this script is 
# https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Import config
source "$DIR/config"

if [ "$1" == "--no-sms" ]
then
    NOSMS=1
    shift
fi

if [ -z "$COMPRESS_METHOD" ]
then
   COMPRESS_METHOD=zstd
fi

VM=$1

while [ -n "$VM" ] 
do
    log_message "Parameter: $VM"

    # Check that given string is VM name
    VM_NAME=$(xe vm-list name-label="$VM" params=name-label --minimal)
    if [ -z "$VM_NAME" ]
    then
        log_message "vm not found!"
    else

        if [ "$VM" != "$VM_NAME" ] 
        then
            log_message "strange xcp-ng responce: $VM_NAME"
            
        else
            # Found VM, check for export file existance
            FILENAME=${VM}_$(date +%Y%m%d).xva 
            if [ -e $FILENAME ]
            then
                log_message "File $FILENAME alredy exists. Rename or delete it first."
            else
                # No such file, get power state if VM
                VM_STATE=$(xe vm-list name-label="$VM" params=power-state --minimal)

                if [ $VM_STATE == "running" ]
                then
                    log_message "start suspend"
                    xe vm-suspend vm=$VM
                    log_message "end suspend"
                fi

                log_message "start export"
                START_SEC_EXP=$(date +%s)
                RES=$(xe vm-export vm=$VM compress=$COMPRESS_METHOD preserve-power-state=true filename=$FILENAME | tr '\n' ' ')
                log_message "end export: $RES" $START_SEC_EXP

                if [ $VM_STATE == "running" ]
                then
                    log_message "start resume"
                    xe vm-resume vm=$VM
                    log_message "end resume"
                fi

                MSG="$(hostname): $VM backup: $RES" 

                # Check if --no-sms option was set
                if [ -z "$NOSMS" ]
                then
                    log_message "sending text message to admin"
                    /root/sms_sms.ru ${PHONE} "$MSG"
                else
                    log_message "$MSG"
                fi
            fi
        fi

    fi

    shift
    VM=$1

done
