#!/bin/bash

# You need to open TCP port $NETCAT_PORT on your firewall.
#
# Add lines to open port 8080 to /etc/sysconfig/iptables
#    # netcat for backups
#    -A RH-Firewall-1-INPUT -m conntrack --ctstate NEW -m tcp -p tcp --dport 8080 -j ACCEPT
#
# then restart iptables:
#    systemctl restart iptables

# If your system does not have ncat, install it
# On xcp-ng:
#    yum install nmap-ncat
# On Ubuntu 20.04:
#    sudo apt install ncat
# On Ubuntu 18.04:
#    sudo apt install netcat

# Get directory where this script is located 
# https://stackoverflow.com/questions/59895/get-the-source-directory-of-a-bash-script-from-within-the-script-itself
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Import config
source "$DIR/config"

if [ -z "$NETCAT_PORT" ]
then
    echo "Set NETCAT_PORT variable in $DIR/config"
    exit
fi

if [ -z "$ADMIN_EMAIL" ]
then
    echo "Set ADMIN_EMAIL variable in $DIR/config"
    exit
fi

# Get pub keys from array $RECIPIENTS and put them to $RES list acceptable by gpg
if [ -n "$RECIPIENTS" ]
then
    SRES=""
    for ix in ${!RECIPIENTS[*]}
    do
        pubkey="${RECIPIENTS[$ix]}"
        if gpg --list-keys "$pubkey" > /dev/null
        then
            SRES+=" -r $pubkey"
        fi
    done
    if [ -z "$SRES" ]
    then
       echo "No valid pubkey names found in \$RECIPIENTS array in /root/config"
       exit
    fi
else
    echo "Specify array of \$RECIPIENTS - gpg pub keys in /root/config"
    exit
fi

# Get list of files
FILES=$(ncat -l "$NETCAT_PORT")

# Store starting second for this task
task_start=$(date +%s)

for fname in $FILES
do
  sleep 2s
  # Store starting second for this file transfer
  sec_start=$(date +%s)

  ncat -l "$NETCAT_PORT" | gpg $SRES -e -o "${fname}.gpg"
  result=$?

  sec_end=$(date +%s)
  duration=$((sec_end - sec_start))
  duration_period=$(date -u -d @$duration +%T)

  if [ $result -eq 0 ]
  then
      file_size=$(stat -c '%s' ${fname}.gpg | numfmt --to=iec)
      msg="Job done ${fname} (${file_size}) ${duration_period}"

      echo $msg
      echo $msg | mail -s "Jobe done $fname" ${ADMIN_EMAIL}
  else
      echo "Job failed ${fname}"
  fi
done

task_end=$(date +%s)
duration=$((task_end - task_start))
duration_period=$(date -u -d @$duration +%T)

DIR=$(basename $(pwd))

msg="Backup task finished at ${DIR}. ${duration_period}" 

echo $msg
echo $msg | mail -s "Backup task finised at $DIR" ${ADMIN_EMAIL}

